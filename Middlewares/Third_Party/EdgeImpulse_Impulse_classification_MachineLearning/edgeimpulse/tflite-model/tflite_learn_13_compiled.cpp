/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.07.2025 18:05:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1520;
#else
constexpr int kTensorArenaSize = 496;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,150 } };
const TfArray<1, float> quant0_scale = { 1, { 0.46141177415847778, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 14, -27, -8, 20, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0025506413076072931, } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[4*8] = { 
  72, 65, 127, -31, 7, -105, -101, -15, 
  61, -22, -90, -115, -88, -107, 1, 20, 
  -113, 90, -73, -98, 73, -79, 86, 69, 
  19, -12, -27, 43, 42, -58, 82, -70, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0059854397550225258, } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[8] = { -5, 11, -4, -6, -8, 11, -6, 73, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0021512974053621292, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[8*16] = { 
  66, 72, 50, -60, 101, 111, 77, 85, -37, 44, -33, -9, 9, 87, 44, 69, 
  -27, 21, 124, -65, 12, 57, 84, 86, 12, -47, -63, 75, -33, 54, 80, 65, 
  -11, -78, 40, -51, -42, -50, 11, 34, 17, 26, -43, -51, 12, 59, 59, -18, 
  50, -111, -67, 45, 51, -62, -41, 88, 81, 79, -32, 3, -89, -61, 53, -65, 
  -42, -107, -79, 36, -75, -89, -54, 105, -105, -46, -82, -2, 12, 82, 27, -27, 
  -88, 20, 73, -25, 52, -42, 70, -45, -8, -102, -89, 68, -42, -57, 106, -46, 
  53, 52, -27, -21, 33, 60, 71, -47, -119, -37, -26, 40, 20, 29, 2, -80, 
  7, 95, 90, 65, -5, 12, -104, -46, -72, 13, 127, -25, 113, -19, 51, 58, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 8,16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0045305462554097176, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { -5, 49, 17, 5, -21, 11, -26, -39, -8, 13, -5, 8, 34, -18, 4, -10, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 0.001050073653459549, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*150] = { 
  24, 10, -70, 56, -70, 13, 63, -65, 0, -32, 10, 9, 49, 4, 24, -62, 28, 29, 33, 38, 11, -45, -36, 70, -15, 73, -51, 51, 39, 1, -70, 16, -21, 72, 37, -54, -40, -13, 46, -57, 28, 46, 53, -39, -22, -59, 4, -34, -58, 26, 47, 20, 8, -48, -40, -63, -16, -17, -46, 66, -52, -21, 76, -69, 48, 27, -16, -10, 24, 50, 64, -21, 52, -13, 43, 48, -54, -24, 92, 53, 2, -14, 20, 47, 89, 61, -8, 67, -35, 16, -21, -47, 38, 22, 37, 38, 19, 53, -18, -38, 34, 31, 65, -58, -45, 13, 4, 49, 9, -24, -38, 77, 67, 2, 40, -22, 84, 17, 77, -16, 68, 5, 2, 35, -54, -14, -26, 59, -40, -16, 3, 52, -55, 2, -12, -34, 5, 11, -39, 3, -13, 45, -2, 45, -14, -13, -20, -49, 59, -14, 
  -34, -31, -46, -37, -19, 1, 70, 63, -36, 102, 18, 40, 25, -88, -14, 40, -34, 29, -41, -14, 62, -51, -40, 48, 6, -37, 46, -54, -18, -17, 12, -76, -86, 0, -40, -24, -8, -16, -39, -31, 43, -32, -90, 36, -87, -82, 44, -31, -45, 42, -43, -70, 9, -75, -49, 13, -6, -55, 22, -77, -21, -78, 15, 21, -36, -28, 52, -60, -96, 50, -87, 12, 8, -80, -13, -40, 11, -29, -51, -68, -24, -43, 62, -80, 56, 27, 20, 61, -60, -32, 42, 48, -43, -29, -47, -38, -45, -29, -77, 9, 0, -43, 43, -71, 82, 50, 43, 35, -43, 15, 36, 30, -59, 93, 22, 85, -41, 42, 26, 13, -29, 37, 104, -40, 54, 52, 84, 89, -31, -20, -36, -11, 54, -58, 2, 9, 42, 73, 59, 17, 121, 71, 57, 102, 31, 57, 97, -16, 84, 4, 
  77, -97, -67, 65, -48, 58, 55, -71, 59, 68, 72, 25, 49, -88, 10, -61, -95, 100, 33, -34, 31, -11, -13, 49, 67, 59, -45, 88, -94, 57, -3, -56, -42, -55, -92, -32, -102, -59, -82, -93, 42, -26, 38, 50, 39, -94, 22, 10, -88, 78, 45, -99, 47, -22, -21, 15, 5, 37, 7, -53, 12, -61, -30, -49, 63, -15, 30, -8, 76, -10, 24, -52, -32, 20, -24, 82, -34, 22, 50, -58, -51, 46, 78, -58, 60, -36, 17, 63, 53, 87, -10, 60, -27, -13, 45, -57, 64, 15, 24, -31, 26, 26, 22, 19, 27, 1, 27, -57, -44, -4, -75, -1, -3, 11, 57, -18, 69, 62, -43, -69, 46, 38, 81, -76, -26, -70, -77, 53, 60, -40, 10, -8, -45, -12, -48, 3, -5, -39, -25, 33, 48, -92, 8, -52, -29, 26, 64, -57, -12, -2, 
  -49, 16, 64, 60, 71, -17, -32, 41, 84, 18, 51, 46, 25, 81, 69, 17, 55, 36, -41, -57, -56, 7, 44, 76, 53, -29, -8, 59, 72, 9, 41, -1, 7, 36, 24, 73, 15, -41, 8, 39, 64, 63, 25, 25, -46, 63, -79, -55, 14, -29, -34, -50, -31, 93, 60, 88, 5, -43, 15, -46, 39, -15, 61, -58, -18, -5, -68, 63, 72, -44, -73, 42, 32, 12, -72, 52, -57, -28, -4, -48, -53, -39, 34, 34, -44, -55, -82, 46, -68, -6, -24, -42, 45, 75, 1, -34, -50, -3, 32, -4, -6, 37, -39, -93, -40, -12, -52, 22, -47, 13, 25, 27, 54, 7, -55, -86, -82, 43, -8, -70, -60, -81, 7, -18, 40, -54, -45, 46, 21, -71, -61, -52, -42, -18, -96, 25, -22, -78, -20, -81, -35, -79, 3, -102, -38, -78, -24, -84, 35, 12, 
  79, -7, -42, 16, -9, -62, 52, -14, -42, -37, -34, -60, -58, -12, 53, -40, -45, 38, -15, -27, 46, 72, -35, 67, 31, -3, -22, -35, -47, 36, -14, 55, -26, 19, -7, -81, -61, 57, -45, -63, 70, -71, -39, 46, -32, -16, 56, -76, -59, 4, 8, 2, -16, -76, -22, 45, 70, -57, 75, -15, -7, -58, -34, 63, -82, -74, -9, -62, -60, 47, 55, 58, -6, -15, -34, -58, -32, 68, -52, -31, 4, -47, 39, 48, 70, -78, -12, 90, 2, -30, 66, -19, 66, 35, -73, -42, 38, 22, -88, 82, 62, -3, 83, 70, -50, 36, 10, 38, -71, 31, 38, -69, -20, -71, -75, 18, 57, 15, -61, -15, 26, 43, -40, 58, -47, -33, -83, -15, 26, 46, 70, -53, 60, -11, -8, -55, -44, -52, -1, 52, -62, 51, -81, -72, 86, -35, 21, 84, 71, -30, 
  22, -10, 58, -9, -13, -10, 53, -32, -43, 31, -55, 87, 16, 0, -37, -33, 12, 68, 33, 53, -63, 84, 15, -54, -7, -75, 17, -4, -15, 104, 92, 26, -50, -14, 0, -21, -26, -45, 40, 6, 46, 79, 35, 0, 45, 77, -28, -27, 95, 1, 70, -9, -38, 89, 33, 7, -22, -34, -22, 46, 16, -10, 37, 51, 71, 26, -10, 27, 65, 31, 8, 63, -40, 30, 27, 56, 50, -40, -11, 44, -10, 34, 40, 61, -19, 69, -18, -3, -71, 62, 83, -5, 69, 64, -53, -20, 1, -62, 52, 81, -56, -73, -58, -25, -31, 14, 6, 80, 76, -32, 103, -15, 41, 8, 54, -39, 24, -32, -70, 73, -13, -61, -24, 15, -26, -14, 93, 37, 28, -5, 32, 38, -69, 16, -25, 56, -6, -78, 79, -36, 33, 47, 27, -53, 76, 61, 34, 94, 52, 48, 
  50, -4, -29, -36, -72, -58, -34, 16, -43, 24, -21, -13, -19, 89, 24, 11, 50, -58, -72, -38, -39, 57, -38, 43, 27, -27, -76, 79, -30, 63, -24, -8, -73, -3, -13, 66, -54, -44, 80, -57, 14, -59, -65, 0, 71, -65, 7, -57, 75, 36, -9, 53, 29, -79, -15, -30, -21, -3, -21, -84, 3, -12, -79, -7, -43, -80, 9, -40, -71, 84, 13, 1, -41, 76, -24, -40, -25, -54, -38, 58, 28, 60, -41, 59, 48, -61, -39, 84, 8, -1, -14, 66, -48, 82, 68, 29, 56, 9, -13, 91, 55, -53, 45, -62, -62, -38, 7, 8, 70, 14, -45, 9, -75, -46, 86, -42, -37, -18, -81, -7, -30, 31, 7, 75, 28, -62, -61, 70, -67, 44, 66, -44, 12, 38, -86, -34, -28, 33, -27, -11, 42, -55, -58, -89, 22, 32, 71, 45, 48, -60, 
  62, 37, 40, -72, -23, 65, 65, -36, -42, -19, -20, -93, 71, -3, 64, -9, 40, -4, 38, 46, -32, -62, -60, 22, 8, 85, 12, -69, -35, -15, 1, 64, -12, -33, 59, -87, 56, 70, 26, 2, 49, -22, -29, -3, -15, 10, -63, 18, 59, 65, -19, 45, -55, 20, 25, 29, -54, -70, -61, 41, -42, 48, 24, 42, 67, -4, -78, 39, 69, 65, -78, -55, -72, -53, -55, -61, 34, 60, 23, 6, 52, -90, -7, 39, -20, -43, -67, -53, -69, 11, -27, -48, -5, 43, 33, -23, 72, -70, 57, 43, 70, 39, -16, 8, -61, 6, -71, 30, 14, 21, 35, -24, -18, -16, -86, -4, -23, -18, 61, 15, -6, -29, -81, 39, -27, -55, 0, 48, 53, 56, -41, -24, 43, -14, 52, 59, 4, 21, 23, 2, -5, 76, -83, 35, -56, 32, -28, -52, -10, -13, 
  36, 51, -25, -17, 24, -75, -58, 67, -34, -91, 29, 74, 24, -45, -92, 59, -19, -6, -27, 92, 40, 46, -12, 44, -27, 87, 72, 59, 63, 43, 35, 30, -49, -20, -31, 62, -75, 33, 26, 24, -11, -51, -72, -27, 41, -56, -67, -16, -43, -34, -67, -8, -53, -4, -17, -68, -56, -43, 74, 35, -52, 69, -10, -1, -59, 81, -10, -56, 2, -82, 15, 78, 101, 59, 32, 71, -72, -11, -51, 56, -15, 55, 4, 16, 47, 61, -16, 45, -45, -28, 5, 38, 3, 53, -80, -38, -37, 5, -48, -51, -34, -82, -29, -69, 62, 68, -34, -59, 3, -52, 54, -5, 41, 26, 98, -45, 72, 9, 41, -55, 93, 10, -46, 109, 9, -42, -58, 35, -8, 46, 26, -18, -31, 51, 65, 23, 44, 74, 81, -13, 39, 7, -37, -66, 14, 50, -67, -87, -15, 57, 
  -77, 20, 57, 109, -39, -59, -39, -5, -51, 97, -76, 19, -19, -58, 13, -55, 6, 50, -52, -72, -9, 41, 80, 81, -11, -25, -80, 96, -56, -35, 122, -13, -8, -20, 88, 1, 108, -12, -8, -38, -50, -38, 112, 7, 20, 88, -31, 25, 108, -21, 23, 49, 82, 86, -19, -38, -64, 112, 15, 53, 127, 59, -60, 10, 47, -61, 10, 10, 55, -23, 65, 12, 97, -5, 1, -31, -65, -34, 70, -43, 7, 8, 80, 8, 88, -32, 56, 111, 88, -2, 77, -33, 29, 40, -31, 100, -8, 38, 59, -19, 83, 41, -21, -32, -21, -43, -22, -6, -7, 98, 34, 12, 62, -4, 38, -5, 69, 49, 74, -50, 49, 36, 18, 102, -31, 52, 77, 4, 8, -24, 8, 11, 111, -72, -18, 47, 49, -32, -62, -89, -36, 70, -54, -50, 59, 49, -73, -29, -40, -82, 
  76, -38, -60, 44, 4, -56, -85, 38, -52, 39, -13, -5, -60, -81, -87, 10, 42, -63, -45, -39, -26, -45, -8, -44, -63, -78, 4, 40, -48, 40, 73, -14, 62, -23, -77, 43, 0, -51, 21, -65, -72, -21, -32, 72, -64, -46, 22, 35, -72, -86, 18, 3, -85, -60, 31, -37, -78, -53, 69, -67, 28, -27, 33, -10, 32, -25, 41, 38, 44, -64, -53, 54, 11, -18, -52, 23, 16, -16, -58, 73, 9, 16, 30, 60, 32, 53, -47, -12, 69, -60, -35, 61, -20, -85, 56, 9, 57, -18, -33, -8, -15, 39, 22, 91, -40, -46, -1, -21, 51, 25, -44, -48, -37, -80, 7, 59, 64, 64, -38, -10, -52, -33, 12, 69, 104, 51, -63, -24, 3, 47, 63, -19, 72, -26, -82, 43, 15, -40, -58, 17, 17, -91, -34, -61, 43, -10, -35, -31, -56, 50, 
  -29, -56, -19, -26, -65, -46, -3, 10, 49, -14, 76, 81, 39, -47, 35, 2, 43, 52, -35, 78, -18, -64, 43, -36, 16, 6, -32, -66, 66, 45, 2, 90, -61, -73, -11, 81, -32, -8, -60, -54, 16, -76, 18, 30, 18, -70, 42, 6, 0, 93, 21, 1, 32, 23, -89, -5, -28, -25, -67, -33, -83, 64, -69, -14, 8, 3, -31, 27, 16, -65, 46, 31, -52, -44, 40, 21, -17, 56, -67, -32, 33, 25, 44, -30, -60, -17, 54, 28, -76, 42, -42, 23, 7, -13, 42, 15, 4, 13, -59, -27, 19, -88, 49, -10, 57, -85, -88, -16, 52, 36, -6, -47, 14, -82, 55, -80, -55, 33, 23, 54, 13, -72, 62, 53, 33, -1, 11, 74, 52, -64, 63, -33, -17, -69, 35, -10, -22, -58, 69, -46, 39, 23, 20, 43, -60, -65, 4, 18, -32, 3, 
  -9, 106, 42, 53, 11, 71, 27, 103, -2, -54, -41, 13, -19, 74, 9, 24, -5, -26, 58, 48, 29, -24, -7, -11, -14, 41, 88, -1, -1, 11, 46, 43, 77, -37, 59, 83, -59, 46, 49, -13, -84, -1, -31, 30, -26, 38, 47, 18, -75, -23, 11, -20, -96, -18, 24, -88, 5, 55, 43, -62, -28, 9, 29, -85, -33, -85, -67, -54, 14, -76, -67, 6, 50, 33, -65, -62, -29, 78, -75, -21, -4, -73, -51, 3, -36, -13, -73, -86, -84, -36, 55, -97, -9, -30, 18, -77, -45, -62, 38, -17, 3, -71, 29, 3, -48, 51, -12, -16, -32, -65, -18, 14, -55, -42, 64, -1, -24, 5, -80, -60, -3, 3, -58, -41, -60, -53, -72, 14, 40, -18, -12, 51, -70, -6, 84, 45, 0, -24, 7, 27, 10, 6, 40, 89, 15, -14, -11, -38, 32, -18, 
  -2, 47, 6, 13, 87, 76, 63, 25, 13, 85, 13, -73, -70, 54, 81, 82, -6, 22, -43, -13, -78, 37, -12, -47, -41, -58, 34, -10, 20, 69, -35, 81, 24, 58, 56, -12, 35, -5, 77, -47, -35, 18, 39, -25, 68, 51, 91, 28, -34, -50, 70, 26, -46, 39, -3, 71, -67, -67, -37, 73, 86, -48, 86, -6, -37, -53, -70, 52, -57, -48, 29, 27, 44, -65, -26, 7, -43, 37, -21, 92, 56, -49, -27, -55, 1, 21, 58, 79, -44, -15, 28, 10, -65, 41, 24, -21, -61, 60, 49, -32, -31, 74, -58, 11, 18, 31, 75, 38, -71, 12, -21, 18, 13, 31, 61, -63, -10, 9, 43, 55, -26, -74, 0, -75, -77, 15, -54, 59, -10, -50, -69, 9, 77, -70, 68, -39, 18, -8, -79, -54, -46, -34, 27, 84, 28, 20, 36, 43, -63, -11, 
  66, 25, -39, -72, -74, 4, -31, -18, 63, 1, 50, 34, -4, 19, -38, -79, -58, 29, 64, -43, -77, 21, 83, 32, 38, 61, 29, -32, -64, 54, -67, -16, 79, 47, -33, 53, 74, 38, 51, -23, -49, -19, -51, -42, 55, -57, -78, -76, -49, -44, -94, 6, -24, -25, 60, -30, 60, 99, -83, 12, -66, 27, -66, -11, -81, 23, 5, 25, -75, -52, 66, -40, 58, -32, 56, 9, 25, 51, 0, 64, 12, -87, -80, -42, -73, -2, 34, 28, -78, 47, 84, -23, 37, -81, 28, -14, -48, 47, -47, 42, 60, -52, 13, 9, 15, 15, 72, 78, 4, 20, -55, -36, -52, 93, 75, -6, -25, -21, 63, -40, 72, 43, -59, 28, -34, -66, 66, 15, -40, 8, -64, -19, -4, 71, -49, -24, 16, 9, 52, 17, 93, 54, 29, -60, -57, 90, 79, -66, 42, -70, 
  8, 31, 21, 51, -32, -79, -65, 23, 85, -21, 40, 2, -11, 71, 77, -35, 63, -51, -13, -32, 25, -38, -44, 61, 17, -57, -36, -44, -4, -76, 18, 56, -29, 64, -10, -16, 34, 27, 28, 18, -9, -33, -29, 3, 2, 2, 38, 47, 65, -11, 28, 40, 78, 41, 51, 40, -38, -8, -56, -2, -79, -19, -60, -33, 42, 45, 18, -36, -63, -45, 51, -11, 49, -41, 70, -9, 29, 17, 51, 26, -5, 45, 11, -71, -77, -9, -27, -49, -61, 49, 65, -49, 1, 18, 41, -35, 52, -33, 49, -14, -65, 65, 40, -15, -91, 91, -52, 41, -31, -6, 33, 63, -4, 31, 3, 23, -69, -70, -40, -59, -68, 72, 16, -22, -43, 75, 20, 5, -47, -78, 66, 50, -59, -15, -69, 70, -67, -44, 27, 87, -63, 52, 74, 99, 29, -23, 18, -3, 28, 7, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 16,150 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0022757842671126127, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,16 } };
const TfArray<1, float> quant7_scale = { 1, { 0.47484281659126282, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,8 } };
const TfArray<1, float> quant8_scale = { 1, { 0.42614099383354187, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.44324466586112976, } };
const TfArray<1, int> quant9_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 150, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension7, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_13_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
